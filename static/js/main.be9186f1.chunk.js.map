{"version":3,"sources":["Card.js","Deck.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","src","useState","xpos","Math","random","ypos","angle","transform","className","alt","style","API_BASE_URL","Deck","deck","setDeck","drawn","setDrawn","autoDraw","setAutoDraw","shuffle","setShuffle","timerRef","useRef","useEffect","a","axios","get","d","data","loadDeck","drawCard","deck_id","drawRes","remaining","Error","card","cards","value","suit","id","code","image","alert","current","setInterval","clearInterval","shuffleDeck","map","c","onClick","auto","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be9186f1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({ name, src }) => {\r\n\tconst [{ xpos, ypos, angle }] = useState({\r\n\t\txpos: Math.random() * 40 - 20,\r\n\t\typos: Math.random() * 40 - 20,\r\n\t\tangle: Math.random() * 90 - 45,\r\n\t});\r\n\r\n\tconst transform = `translate(${xpos}px, ${ypos}px) rotate(${angle}deg)`;\r\n\r\n\treturn (\r\n\t\t<img className=\"Card\" src={src} alt={name} style={{ transform }}></img>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport Card from './Card';\r\nimport './Deck.css';\r\n\r\nconst API_BASE_URL = 'https://deckofcardsapi.com/api/deck';\r\nconst Deck = () => {\r\n\tconst [deck, setDeck] = useState(null);\r\n\tconst [drawn, setDrawn] = useState([]);\r\n\tconst [autoDraw, setAutoDraw] = useState(false);\r\n\tconst [shuffle, setShuffle] = useState(false);\r\n\tconst timerRef = useRef(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function loadDeck() {\r\n\t\t\tlet d = await axios.get(`${API_BASE_URL}/new/shuffle`);\r\n\t\t\tsetDeck(d.data);\r\n\t\t}\r\n\t\tloadDeck();\r\n\t}, [setDeck]);\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function drawCard() {\r\n\t\t\tlet { deck_id } = deck;\r\n\t\t\ttry {\r\n\t\t\t\tlet drawRes = await axios.get(`${API_BASE_URL}/${deck_id}/draw`);\r\n\t\t\t\t// console.log(drawRes);\r\n\r\n\t\t\t\tif (drawRes.data.remaining === 0) {\r\n\t\t\t\t\tthrow new Error('there are no cards remaining!');\r\n\t\t\t\t}\r\n\t\t\t\tconst card = drawRes.data.cards[0];\r\n\t\t\t\tsetDrawn(d => [\r\n\t\t\t\t\t...d,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: card.value + ' ' + card.suit,\r\n\t\t\t\t\t\tid: card.code,\r\n\t\t\t\t\t\timage: card.image,\r\n\t\t\t\t\t},\r\n\t\t\t\t]);\r\n\t\t\t} catch (error) {\r\n\t\t\t\talert(error);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (autoDraw && !timerRef.current) {\r\n\t\t\ttimerRef.current = setInterval(async () => {\r\n\t\t\t\tawait drawCard();\r\n\t\t\t}, 1000);\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tclearInterval(timerRef.current);\r\n\t\t\ttimerRef.current = null;\r\n\t\t};\r\n\t}, [deck, autoDraw, setAutoDraw]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (shuffle) {\r\n\t\t\tasync function shuffleDeck() {\r\n\t\t\t\tsetAutoDraw(false);\r\n\t\t\t\tsetDeck(null);\r\n\t\t\t\tlet d = await axios.get(`${API_BASE_URL}/new/shuffle`);\r\n\t\t\t\tsetDeck(d.data);\r\n\t\t\t\tsetDrawn([]);\r\n\t\t\t}\r\n\t\t\tshuffleDeck();\r\n\t\t}\r\n\t\treturn () => setShuffle(false);\r\n\t}, [shuffle]);\r\n\r\n\tconst toggleAutoDraw = () => {\r\n\t\tsetAutoDraw(auto => !auto);\r\n\t};\r\n\r\n\tconst shuffleCards = () => {\r\n\t\tsetShuffle(true);\r\n\t};\r\n\tconst cards = drawn.map(c => <Card key={c.id} src={c.image} name={c.name} />);\r\n\r\n\treturn (\r\n\t\t<div className=\"Deck\">\r\n\t\t\t{deck ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button className=\"Deck-draw\" onClick={toggleAutoDraw}>\r\n\t\t\t\t\t\t{autoDraw ? 'STOP' : 'START'} drawing a card\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t) : null}\r\n\t\t\t<button className=\"Deck-draw\" onClick={shuffleCards}>\r\n\t\t\t\tShuffle Deck\r\n\t\t\t</button>\r\n\t\t\t<div className=\"Deck-cardarea\">{cards}</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Deck;\r\n","import Deck from './Deck';\nimport './App.css';\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Deck />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}